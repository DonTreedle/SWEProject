/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main.java.PizzaApplication;

import java.util.Arrays;

import javax.swing.JOptionPane;

/**
 *
 * @author jesse
 */
public class NewOrderScreen extends javax.swing.JFrame {
    int[] tops = new int[14];
    int[] selections = new int[4];
    OrderManager om;
    public void addOrder(CustomerDB cbd) {
        om = new OrderManager(cbd.id);
    }
    /**
     * Creates new form NewOrderScreen
     */
    public NewOrderScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SizeSelection = new javax.swing.ButtonGroup();
        CrustSelection = new javax.swing.ButtonGroup();
        SauceSelection = new javax.swing.ButtonGroup();
        BackButton = new javax.swing.JButton();
        SmallSizeRadio = new javax.swing.JRadioButton();
        MediumSizeRadio = new javax.swing.JRadioButton();
        LargeSizeRadio = new javax.swing.JRadioButton();
        SizeLabel = new javax.swing.JLabel();
        CrustLabel = new javax.swing.JLabel();
        ThinCrustRadio = new javax.swing.JRadioButton();
        HandTossedCrustRadio = new javax.swing.JRadioButton();
        StuffedCrustRadio = new javax.swing.JRadioButton();
        SauceLabel = new javax.swing.JLabel();
        TomatoSauceRadio = new javax.swing.JRadioButton();
        MarinaraSauceRadio = new javax.swing.JRadioButton();
        BBQSauceRadio = new javax.swing.JRadioButton();
        AlfredoSauceRadio = new javax.swing.JRadioButton();
        ToppingsLabel = new javax.swing.JLabel();
        PepperoniCheck = new javax.swing.JCheckBox();
        SausageCheck = new javax.swing.JCheckBox();
        BaconCheck = new javax.swing.JCheckBox();
        ChickenCheck = new javax.swing.JCheckBox();
        BeefCheck = new javax.swing.JCheckBox();
        HamCheck = new javax.swing.JCheckBox();
        AnchoviesCheck = new javax.swing.JCheckBox();
        BlackOlivesCheck = new javax.swing.JCheckBox();
        GreenPeppersCheck = new javax.swing.JCheckBox();
        RedPeppersCheck = new javax.swing.JCheckBox();
        JalepenoCheck = new javax.swing.JCheckBox();
        OnionCheck = new javax.swing.JCheckBox();
        MushroomsCheck = new javax.swing.JCheckBox();
        PineappleCheck = new javax.swing.JCheckBox();
        SpecialtyLabel = new javax.swing.JLabel();
        AddToOrderButton = new javax.swing.JButton();
        NextButton = new javax.swing.JButton();
        SpecialtyComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pizza Application");
        setAlwaysOnTop(true);

        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        SizeSelection.add(SmallSizeRadio);
        SmallSizeRadio.setText("Small");
        SmallSizeRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SizeRadioActionPerformed(evt);
            }
        });

        SizeSelection.add(MediumSizeRadio);
        MediumSizeRadio.setText("Medium");
        MediumSizeRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SizeRadioActionPerformed(evt);
            }
        });

        SizeSelection.add(LargeSizeRadio);
        LargeSizeRadio.setText("Large");
        LargeSizeRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SizeRadioActionPerformed(evt);
            }
        });

        SizeLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        SizeLabel.setText("Size:");

        CrustLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        CrustLabel.setText("Crust:");

        CrustSelection.add(ThinCrustRadio);
        ThinCrustRadio.setText("Thin");
        ThinCrustRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrustRadioActionPerformed(evt);
            }
        });

        CrustSelection.add(HandTossedCrustRadio);
        HandTossedCrustRadio.setText("Hand-Tossed");
        HandTossedCrustRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrustRadioActionPerformed(evt);
            }
        });

        CrustSelection.add(StuffedCrustRadio);
        StuffedCrustRadio.setText("Stuffed");
        StuffedCrustRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrustRadioActionPerformed(evt);
            }
        });

        SauceLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        SauceLabel.setText("Sauce:");

        SauceSelection.add(TomatoSauceRadio);
        TomatoSauceRadio.setText("Tomato");
        TomatoSauceRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SauceRadioActionPerformed(evt);
            }
        });

        SauceSelection.add(MarinaraSauceRadio);
        MarinaraSauceRadio.setText("Marinara");
        MarinaraSauceRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SauceRadioActionPerformed(evt);
            }
        });

        SauceSelection.add(BBQSauceRadio);
        BBQSauceRadio.setText("Barbecue");
        BBQSauceRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SauceRadioActionPerformed(evt);
            }
        });

        SauceSelection.add(AlfredoSauceRadio);
        AlfredoSauceRadio.setText("Alfredo");
        AlfredoSauceRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SauceRadioActionPerformed(evt);
            }
        });

        ToppingsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        ToppingsLabel.setText("Toppings:");

        PepperoniCheck.setText("Pepperoni");
        PepperoniCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PepperoniCheckActionPerformed(evt);
            }
        });

        SausageCheck.setText("Sausage");
        SausageCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SausageCheckActionPerformed(evt);
            }
        });

        BaconCheck.setText("Bacon");
        BaconCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BaconCheckActionPerformed(evt);
            }
        });

        ChickenCheck.setText("Chicken");
        ChickenCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChickenCheckActionPerformed(evt);
            }
        });

        BeefCheck.setText("Beef");
        BeefCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BeefCheckActionPerformed(evt);
            }
        });

        HamCheck.setText("Ham");
        HamCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HamCheckActionPerformed(evt);
            }
        });

        AnchoviesCheck.setText("Anchovies");
        AnchoviesCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnchoviesCheckActionPerformed(evt);
            }
        });

        BlackOlivesCheck.setText("Black Olives");
        BlackOlivesCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlackOlivesCheckActionPerformed(evt);
            }
        });

        GreenPeppersCheck.setText("Green Peppers");
        GreenPeppersCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GreenPeppersCheckActionPerformed(evt);
            }
        });

        RedPeppersCheck.setText("Red Peppers");
        RedPeppersCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedPeppersCheckActionPerformed(evt);
            }
        });

        JalepenoCheck.setText("Jalepeno");
        JalepenoCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JalepenoCheckActionPerformed(evt);
            }
        });

        OnionCheck.setText("Onions");
        OnionCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnionCheckActionPerformed(evt);
            }
        });

        MushroomsCheck.setText("Mushrooms");
        MushroomsCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MushroomsCheckActionPerformed(evt);
            }
        });

        PineappleCheck.setText("Pineapple");
        PineappleCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PineappleCheckActionPerformed(evt);
            }
        }); 

        SpecialtyLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        SpecialtyLabel.setText("Specialty:");

        AddToOrderButton.setText("Add To Order");
        AddToOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddToOrderButtonActionPerformed(evt);
            }
        });

        NextButton.setText("Next");
        NextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextButtonActionPerformed(evt);
            }
        });

        SpecialtyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Custom", "Meat Lovers", "Hawian", "Supreme", "Chicken Alfredo" }));
        SpecialtyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpecialtyComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SauceLabel)
                            .addComponent(StuffedCrustRadio)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(MediumSizeRadio)
                                    .addComponent(SmallSizeRadio)
                                    .addComponent(LargeSizeRadio)
                                    .addComponent(CrustLabel)
                                    .addComponent(ThinCrustRadio)
                                    .addComponent(HandTossedCrustRadio))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(90, 90, 90)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(HamCheck)
                                            .addComponent(BeefCheck)
                                            .addComponent(ToppingsLabel)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(SausageCheck)
                                                        .addGap(12, 12, 12))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(PepperoniCheck)
                                                        .addGap(1, 1, 1)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(BlackOlivesCheck)
                                                    .addComponent(AnchoviesCheck)))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(92, 92, 92)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ChickenCheck)
                                            .addComponent(BaconCheck))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(JalepenoCheck)
                                            .addComponent(RedPeppersCheck)
                                            .addComponent(OnionCheck)
                                            .addComponent(MushroomsCheck)
                                            .addComponent(PineappleCheck)
                                            .addComponent(GreenPeppersCheck))))
                                .addGap(77, 77, 77)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SpecialtyLabel)
                                    .addComponent(SpecialtyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TomatoSauceRadio))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(MarinaraSauceRadio))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(BBQSauceRadio))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(AlfredoSauceRadio))
                    .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(8, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(AddToOrderButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NextButton)
                .addGap(7, 7, 7))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SizeLabel)
                    .addComponent(ToppingsLabel))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SmallSizeRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MediumSizeRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LargeSizeRadio)
                        .addGap(28, 28, 28)
                        .addComponent(CrustLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ThinCrustRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HandTossedCrustRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StuffedCrustRadio)
                        .addGap(18, 18, 18)
                        .addComponent(SauceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TomatoSauceRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MarinaraSauceRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BBQSauceRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AlfredoSauceRadio))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PepperoniCheck)
                            .addComponent(AnchoviesCheck))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SausageCheck)
                            .addComponent(BlackOlivesCheck)
                            .addComponent(SpecialtyLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BaconCheck)
                            .addComponent(GreenPeppersCheck)
                            .addComponent(SpecialtyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ChickenCheck)
                            .addComponent(RedPeppersCheck))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BeefCheck)
                            .addComponent(JalepenoCheck))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(HamCheck)
                            .addComponent(OnionCheck))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MushroomsCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PineappleCheck)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddToOrderButton)
                    .addComponent(NextButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        MainScreen main = new MainScreen();
        dispose();//close exsisting screen
        main.setVisible(true);//reopen main screen
    }//GEN-LAST:event_BackButtonActionPerformed

    private void SizeRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SmallSizeRadioActionPerformed
        if (SmallSizeRadio.isSelected()) {
            selections[0] = 1;
        }
        if (MediumSizeRadio.isSelected()) {
            selections[0] = 2;
        }
        if (LargeSizeRadio.isSelected()) {
            selections[0] = 3;
        }
        System.out.println(Arrays.toString(selections));
    }//GEN-LAST:event_SmallSizeRadioActionPerformed

    private void CrustRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThinCrustRadioActionPerformed
        if (ThinCrustRadio.isSelected()) {
            selections[1] = 1;
        }
        if (HandTossedCrustRadio.isSelected()) {
            selections[1] = 2;
        }
        if (StuffedCrustRadio.isSelected()) {
            selections[1] = 3;
        }
        System.out.println(Arrays.toString(selections));
    }//GEN-LAST:event_ThinCrustRadioActionPerformed

    private void SauceRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThinCrustRadioActionPerformed
        if (TomatoSauceRadio.isSelected()) {
            selections[2] = 1;
        }
        if (MarinaraSauceRadio.isSelected()) {
            selections[2] = 2;
        }
        if (BBQSauceRadio.isSelected()) {
            selections[2] = 3;
        }
        if (AlfredoSauceRadio.isSelected()) {
            selections[2] = 4;
        }
        System.out.println(Arrays.toString(selections));
    }

    private void PepperoniCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PepperoniCheckActionPerformed
        if (PepperoniCheck.isSelected()) {
            tops[0] = 1;
            System.out.println(Arrays.toString(tops));
        }
        if (!PepperoniCheck.isSelected()) {
            tops[0] = 0;
            System.out.println(Arrays.toString(tops));
        }
    }//GEN-LAST:event_PepperoniCheckActionPerformed

    private void SausageCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PepperoniCheckActionPerformed
        if (SausageCheck.isSelected()) {
            tops[1] = 1;
            System.out.println(Arrays.toString(tops));
        }
        if (!SausageCheck.isSelected()) {
            tops[1] = 0;
            System.out.println(Arrays.toString(tops));
        }
    }

    private void BaconCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PepperoniCheckActionPerformed
        if (BaconCheck.isSelected()) {
            tops[2] = 1;
            System.out.println(Arrays.toString(tops));
        }
        if (!BaconCheck.isSelected()) {
            tops[2] = 0;
            System.out.println(Arrays.toString(tops));
        }
    }

    private void ChickenCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PepperoniCheckActionPerformed
        if (ChickenCheck.isSelected()) {
            tops[3] = 1;
            System.out.println(Arrays.toString(tops));
        }
        if (!ChickenCheck.isSelected()) {
            tops[3] = 0;
            System.out.println(Arrays.toString(tops));
        }
    }

    private void BeefCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PepperoniCheckActionPerformed
        if (BeefCheck.isSelected()) {
            tops[4] = 1;
            System.out.println(Arrays.toString(tops));
        }
        if (!BeefCheck.isSelected()) {
            tops[4] = 0;
            System.out.println(Arrays.toString(tops));
        }
    }

    private void HamCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PepperoniCheckActionPerformed
        if (HamCheck.isSelected()) {
            tops[5] = 1;
            System.out.println(Arrays.toString(tops));
        }
        if (!HamCheck.isSelected()) {
            tops[5] = 0;
            System.out.println(Arrays.toString(tops));
        }
    }

    private void AnchoviesCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PepperoniCheckActionPerformed
        if (AnchoviesCheck.isSelected()) {
            tops[6] = 1;
            System.out.println(Arrays.toString(tops));
        }
        if (!AnchoviesCheck.isSelected()) {
            tops[6] = 0;
            System.out.println(Arrays.toString(tops));
        }
    }

    private void BlackOlivesCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PepperoniCheckActionPerformed
        if (BlackOlivesCheck.isSelected()) {
            tops[7] = 1;
            System.out.println(Arrays.toString(tops));
        }
        if (!BlackOlivesCheck.isSelected()) {
            tops[7] = 0;
            System.out.println(Arrays.toString(tops));
        }
    }

    private void GreenPeppersCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PepperoniCheckActionPerformed
        if (GreenPeppersCheck.isSelected()) {
            tops[8] = 1;
            System.out.println(Arrays.toString(tops));
        }
        if (!GreenPeppersCheck.isSelected()) {
            tops[8] = 0;
            System.out.println(Arrays.toString(tops));
        }
    }

    private void RedPeppersCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PepperoniCheckActionPerformed
        if (RedPeppersCheck.isSelected()) {
            tops[9] = 1;
            System.out.println(Arrays.toString(tops));
        }
        if (!RedPeppersCheck.isSelected()) {
            tops[9] = 0;
            System.out.println(Arrays.toString(tops));
        }
    }

    private void JalepenoCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PepperoniCheckActionPerformed
        if (JalepenoCheck.isSelected()) {
            tops[10] = 1;
            System.out.println(Arrays.toString(tops));
        }
        if (!JalepenoCheck.isSelected()) {
            tops[10] = 0;
            System.out.println(Arrays.toString(tops));
        }
    }

    private void OnionCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PepperoniCheckActionPerformed
        if (OnionCheck.isSelected()) {
            tops[11] = 1;
            System.out.println(Arrays.toString(tops));
        }
        if (!OnionCheck.isSelected()) {
            tops[11] = 0;
            System.out.println(Arrays.toString(tops));
        }
    }

    private void MushroomsCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PepperoniCheckActionPerformed
        if (MushroomsCheck.isSelected()) {
            tops[12] = 1;
            System.out.println(Arrays.toString(tops));
        }
        if (!MushroomsCheck.isSelected()) {
            tops[12] = 0;
            System.out.println(Arrays.toString(tops));
        }
    }

    private void PineappleCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PepperoniCheckActionPerformed
        if (PineappleCheck.isSelected()) {
            tops[13] = 1;
            System.out.println(Arrays.toString(tops));
        }
        if (!PineappleCheck.isSelected()) {
            tops[13] = 0;
            System.out.println(Arrays.toString(tops));
        }
    }

    private void NextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextButtonActionPerformed
        DrinkSelectionScreen drinks = new DrinkSelectionScreen();
        drinks.contOrder(om);
        drinks.setVisible(true);
        dispose();
    }//GEN-LAST:event_NextButtonActionPerformed

    private void AddToOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddToOrderButtonActionPerformed
        JOptionPane.showMessageDialog(this, "Successfully added to order!!!!");
        om.addPizzaToOrder(selections, tops);
    }//GEN-LAST:event_AddToOrderButtonActionPerformed

    private void SpecialtyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpecialtyComboBoxActionPerformed
        String Selected = SpecialtyComboBox.getSelectedItem().toString();
        
        if(Selected.equals("Meat Lovers")){
            selections[3] = 2;
            PepperoniCheck.setSelected(false); tops[0] = 0;
            SausageCheck.setSelected(false); tops[1] = 0;
            ChickenCheck.setSelected(false); tops[2] = 0;
            BaconCheck.setSelected(false); tops[3] = 0;
            HamCheck.setSelected(false); tops[4] = 0;
            BeefCheck.setSelected(false); tops[5] = 0;
            AnchoviesCheck.setSelected(false); tops[6] = 0;
            BlackOlivesCheck.setSelected(false); tops[7] = 0;
            GreenPeppersCheck.setSelected(false); tops[8] = 0;
            MushroomsCheck.setSelected(false); tops[9] = 0;
            OnionCheck.setSelected(false); tops[10] = 0;
            PineappleCheck.setSelected(false); tops[11] = 0;
            RedPeppersCheck.setSelected(false); tops[12] = 0;
            JalepenoCheck.setSelected(false); tops[13] = 0;
            
            PepperoniCheck.setSelected(true); tops[0] = 1;
            BaconCheck.setSelected(true); tops[2] = 1;
            SausageCheck.setSelected(true); tops[1] = 1;
            BeefCheck.setSelected(true); tops[4] = 1;
        }
        if(Selected.equals("Hawian")){
            selections[3] = 3;
            PepperoniCheck.setSelected(false); tops[0] = 0;
            SausageCheck.setSelected(false); tops[1] = 0;
            ChickenCheck.setSelected(false); tops[2] = 0;
            BaconCheck.setSelected(false); tops[3] = 0;
            HamCheck.setSelected(false); tops[4] = 0;
            BeefCheck.setSelected(false); tops[5] = 0;
            AnchoviesCheck.setSelected(false); tops[6] = 0;
            BlackOlivesCheck.setSelected(false); tops[7] = 0;
            GreenPeppersCheck.setSelected(false); tops[8] = 0;
            MushroomsCheck.setSelected(false); tops[9] = 0;
            OnionCheck.setSelected(false); tops[10] = 0;
            PineappleCheck.setSelected(false); tops[11] = 0;
            RedPeppersCheck.setSelected(false); tops[12] = 0;
            JalepenoCheck.setSelected(false); tops[13] = 0;
            
            PineappleCheck.setSelected(true); tops[13] = 1;
            HamCheck.setSelected(true); tops[5] = 1;
        }
        if(Selected.equals("Supreme")){
            selections[3] = 4;
            PepperoniCheck.setSelected(false); tops[0] = 0;
            SausageCheck.setSelected(false); tops[1] = 0;
            ChickenCheck.setSelected(false); tops[2] = 0;
            BaconCheck.setSelected(false); tops[3] = 0;
            HamCheck.setSelected(false); tops[4] = 0;
            BeefCheck.setSelected(false); tops[5] = 0;
            AnchoviesCheck.setSelected(false); tops[6] = 0;
            BlackOlivesCheck.setSelected(false); tops[7] = 0;
            GreenPeppersCheck.setSelected(false); tops[8] = 0;
            MushroomsCheck.setSelected(false); tops[9] = 0;
            OnionCheck.setSelected(false); tops[10] = 0;
            PineappleCheck.setSelected(false); tops[11] = 0;
            RedPeppersCheck.setSelected(false); tops[12] = 0;
            JalepenoCheck.setSelected(false); tops[13] = 0;
            
            PepperoniCheck.setSelected(true); tops[0] = 1;
            SausageCheck.setSelected(true); tops[1] = 1;
            AnchoviesCheck.setSelected(true); tops[6] = 1;
            BlackOlivesCheck.setSelected(true); tops[7] = 1;
            GreenPeppersCheck.setSelected(true); tops[8] = 1;
            MushroomsCheck.setSelected(true); tops[12] = 1;
            OnionCheck.setSelected(true); tops[11] = 1;
            RedPeppersCheck.setSelected(true); tops[9] = 1;
        }
        if(Selected.equals("Chicken Alfredo")){
            selections[3] = 5;
            PepperoniCheck.setSelected(false); tops[0] = 0;
            SausageCheck.setSelected(false); tops[1] = 0;
            ChickenCheck.setSelected(false); tops[2] = 0;
            BaconCheck.setSelected(false); tops[3] = 0;
            HamCheck.setSelected(false); tops[4] = 0;
            BeefCheck.setSelected(false); tops[5] = 0;
            AnchoviesCheck.setSelected(false); tops[6] = 0;
            BlackOlivesCheck.setSelected(false); tops[7] = 0;
            GreenPeppersCheck.setSelected(false); tops[8] = 0;
            MushroomsCheck.setSelected(false); tops[9] = 0;
            OnionCheck.setSelected(false); tops[10] = 0;
            PineappleCheck.setSelected(false); tops[11] = 0;
            RedPeppersCheck.setSelected(false); tops[12] = 0;
            JalepenoCheck.setSelected(false); tops[13] = 0;
            
            ChickenCheck.setSelected(true); tops[3] = 1;
            AlfredoSauceRadio.setSelected(true); selections[2] = 4;
        }
        if(Selected.equals("Custom")){
            selections[3] = 1;
            PepperoniCheck.setSelected(false); tops[0] = 0;
            SausageCheck.setSelected(false); tops[1] = 0;
            ChickenCheck.setSelected(false); tops[2] = 0;
            BaconCheck.setSelected(false); tops[3] = 0;
            HamCheck.setSelected(false); tops[4] = 0;
            BeefCheck.setSelected(false); tops[5] = 0;
            AnchoviesCheck.setSelected(false); tops[6] = 0;
            BlackOlivesCheck.setSelected(false); tops[7] = 0;
            GreenPeppersCheck.setSelected(false); tops[8] = 0;
            MushroomsCheck.setSelected(false); tops[9] = 0;
            OnionCheck.setSelected(false); tops[10] = 0;
            PineappleCheck.setSelected(false); tops[11] = 0;
            RedPeppersCheck.setSelected(false); tops[12] = 0;
            JalepenoCheck.setSelected(false); tops[13] = 0;
        }
        System.out.println(Arrays.toString(tops));
        System.out.println(Arrays.toString(selections));
    }//GEN-LAST:event_SpecialtyComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewOrderScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewOrderScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewOrderScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewOrderScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewOrderScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddToOrderButton;
    private javax.swing.JRadioButton AlfredoSauceRadio;
    private javax.swing.JCheckBox AnchoviesCheck;
    private javax.swing.JRadioButton BBQSauceRadio;
    private javax.swing.JButton BackButton;
    private javax.swing.JCheckBox BaconCheck;
    private javax.swing.JCheckBox BeefCheck;
    private javax.swing.JCheckBox BlackOlivesCheck;
    private javax.swing.JCheckBox ChickenCheck;
    private javax.swing.JLabel CrustLabel;
    private javax.swing.ButtonGroup CrustSelection;
    private javax.swing.JCheckBox GreenPeppersCheck;
    private javax.swing.JCheckBox HamCheck;
    private javax.swing.JRadioButton HandTossedCrustRadio;
    private javax.swing.JCheckBox JalepenoCheck;
    private javax.swing.JRadioButton LargeSizeRadio;
    private javax.swing.JRadioButton MarinaraSauceRadio;
    private javax.swing.JRadioButton MediumSizeRadio;
    private javax.swing.JCheckBox MushroomsCheck;
    private javax.swing.JButton NextButton;
    private javax.swing.JCheckBox OnionCheck;
    private javax.swing.JCheckBox PepperoniCheck;
    private javax.swing.JCheckBox PineappleCheck;
    private javax.swing.JCheckBox RedPeppersCheck;
    private javax.swing.JLabel SauceLabel;
    private javax.swing.ButtonGroup SauceSelection;
    private javax.swing.JCheckBox SausageCheck;
    private javax.swing.JLabel SizeLabel;
    private javax.swing.ButtonGroup SizeSelection;
    private javax.swing.JRadioButton SmallSizeRadio;
    private javax.swing.JComboBox<String> SpecialtyComboBox;
    private javax.swing.JLabel SpecialtyLabel;
    private javax.swing.JRadioButton StuffedCrustRadio;
    private javax.swing.JRadioButton ThinCrustRadio;
    private javax.swing.JRadioButton TomatoSauceRadio;
    private javax.swing.JLabel ToppingsLabel;
    // End of variables declaration//GEN-END:variables
}
